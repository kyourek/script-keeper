using System;using System.Configuration;namespace Keeper.OfScripts.Configuration{		public enum AliasSourceResidence	{		Local,		Remote	}		public class ResourceAliasElement : ConfigurationElement	{		[ConfigurationProperty("alias", IsRequired = true)]		public string Alias		{			get { return (string)this["alias"]; }			set { this["alias"] = value; }		}				[ConfigurationProperty("source", IsRequired = true)]		public string Source		{			get { return (string)this["source"]; }			set { this["source"] = value; }		}				[ConfigurationProperty("residence", IsRequired = false, DefaultValue = "remote")]		public string Residence		{			get { return (string)this["residence"]; }			set { this["residence"] = value; }		}	}		public class ResourceAliasElementCollection : ConfigurationElementCollection	{		protected override ConfigurationElement CreateNewElement()		{			return new ResourceAliasElement();		}				protected override object GetElementKey(ConfigurationElement element)		{			if (null == element) throw new ArgumentNullException("element");			if (null == (element as ResourceAliasElement)) throw new ArgumentException("The element should be of type '" + typeof(ResourceAliasElement).Name + "'.");						return ((ResourceAliasElement)element).Alias;		}	}		public class KeeperConfigSection : ConfigurationSection	{		public static readonly string SectionName = "keeperConfig";				[ConfigurationProperty("aliases", IsDefaultCollection = false)]		[ConfigurationCollection(typeof(ResourceAliasElementCollection),			AddItemName = "add",			ClearItemsName = "clear",			RemoveItemName = "remove"		)]		public ResourceAliasElementCollection Aliases		{			get			{				return (ResourceAliasElementCollection)this["aliases"];				}						}	}		public class KeeperConfig	{        private static KeeperConfig _Instance;        public static KeeperConfig Instance        {            get { return _Instance = (_Instance ?? new KeeperConfig()); }        }                               private KeeperConfigSection _Section;		        private KeeperConfig() { }                		public virtual KeeperConfigSection Section		{			get			{				_Section = _Section ?? ConfigurationManager.GetSection(KeeperConfigSection.SectionName) as KeeperConfigSection;				return _Section;													}					}	}}